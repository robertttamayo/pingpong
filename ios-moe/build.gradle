// Exclude all files from Gradle's test runner
test { exclude '**' }

task copyNatives << {
    file("xcode/native/ios/").mkdirs();
    def LD_FLAGS = "LIBGDX_NATIVES = "
    configurations.natives.files.each { jar->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("xcode/native/ios")
        if (outputDir != null) {
            FileCollection fileCollection = zipTree(jar)
            for (File libFile : fileCollection) {
                if (libFile.getAbsolutePath().endsWith(".a") && !libFile.getAbsolutePath().contains("/tvos/")) {
                    copy {
                        from libFile.getAbsolutePath()
                        into outputDir
                    }
                    LD_FLAGS += " -force_load \${SRCROOT}/native/ios/" + libFile.getName()
                }
            }
        }
    }
    def outFlags = file("xcode/ios-moe/custom.xcconfig");
    outFlags.write LD_FLAGS

    def proguard = file("proguard.append.cfg")
    if (!proguard.exists()) {
        proguard = new File("proguard.append.cfg")
        proguard << "\n-keep class com.badlogic.** { *; }\n"
        proguard << "-keep enum com.badlogic.** { *; }\n"
    }
}

sourceSets.main.java.srcDirs = [ "src/" ]

// Setup Multi-OS Engine
moe {
    
    xcode {
        project 'xcode/ios-moe.xcodeproj'
        mainTarget 'ios-moe'
        testTarget 'ios-moe-Test'

        mainScheme 'ios-moe'
        testScheme 'ios-moe-Test'
    }
    
    signing {
        developmentTeam '73Y3RTRF2D'

        provisioningProfileSpecifier 'Revolve Profile 3'
        provisioningProfile '/Users/roberttamayo/madcoatgames/provisioning/Revolve_Profile_3.mobileprovision'
        
        //provisioningProfileSpecifier '/Users/roberttamayo/revolve.mobileprovision'
        //provisioningProfile '/Users/roberttamayo/revolve.mobileprovision'
        
        

        // String, name of the signing identity
        //signingIdentity '86********************************ED'
    }

    remoteBuild {
        resources = [ file("../android/assets") ]
    }
    
    ipaExport {
	    // (String) Describes how Xcode should export the archive. Available options: app-store, ad-hoc, package,
	    // enterprise, development, and developer-id. The list of options varies based on the type of archive. Defaults
	    // to development.
	    method 'app-store'
    }
  
}

moeMainReleaseIphoneosXcodeBuild.dependsOn copyNatives
moeMainDebugIphoneosXcodeBuild.dependsOn copyNatives
moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyNatives
moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyNatives

// Setup Eclipse
eclipse {
    // Set Multi-OS Engine nature
    project {
        name = appName + "-ios-moe"
        natures 'org.multi-os-engine.project'
    }
}
